version: 2.1

orbs:
  node: circleci/node@5.0.1
  docker: circleci/docker@2.7.2
  heroku: circleci/heroku@2.0
  snyk: snyk/snyk@1.5.0

jobs:
  build:
    # 1st way to use docker container in circleci
    docker:
      # specifying which image to use
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Installing dependencies..."
          npm install
  test:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Running tests..."
          npm run test
  # publish:
  #   # 2nd way to use docker container in circleci
  #   # refer to documentation on how to specify which image to use
  #   # e.g. - image: cimg/node:16.10
  #   executor: docker/docker
  #   steps:
  #     - setup_remote_docker
  #     - checkout
  #     - docker/check
  #     - docker/build:
  #         image: dexsjw/publish-assignment
  #         tag: <<pipeline.git.tag>>
  #     - docker/push:
  #         image: dexsjw/publish-assignment
  #         tag: <<pipeline.git.tag>>
  # deploy:
  #   executor: heroku/default
  #   steps:
  #     - setup_remote_docker
  #     - heroku/install
  #     - checkout
  #     - run:
  #         name: Heroku Container Push
  #         command: |
  #           heroku container:login
  #           heroku stack:set container -a dex-su-devops
  #           heroku container:push web -a dex-su-devops
  #           heroku container:release web -a dex-su-devops
  scan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: dexsjw/publish-assignment
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: docker build -t $IMAGE_NAME .
      - snyk/scan:
          docker-image-name: $IMAGE_NAME
  codescan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: dexsjw/publish-assignment
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: docker build -t $IMAGE_NAME .
      - snyk/install
      - run: |
          snyk code test

workflows:
  simple_workflow:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - main
                - release
      - test:
          requires:
            - build
          filters:
            branches:
              only: 
                - main
                - release
      # - publish:
      #     filters:
      #       branches:
      #         only: release
      #       tags:
      #         only: /v.*/
      # - deploy:
      #     filters:
      #       branches:
      #         only: release
      #       tags:
      #         only: /v.*/
      - scan:
          requires:
            - build
          filters:
            branches:
              only: main
      - codescan:
          requires:
            - build
          filters:
            branches:
              only: main